profiling:/nfs/stak/users/matthewm/cs362/Assignment3/dominion/rngs.gcda:Version mismatch - expected 408R got 402*
profiling:/nfs/stak/users/matthewm/cs362/Assignment3/dominion/dominion.gcda:Version mismatch - expected 408R got 402*
Start Unit Test 1: updateCoins()
updateCoins(): PASS with one of each coin
updateCoins(): PASS with single copper
updateCoins(): PASS with single silver
updateCoins(): PASS with single gold
updateCoins(): PASS with single gold
updateCoins(): PASS with all copper
updateCoins(): PASS with negative Bonus
File 'unittest1.c'
Lines executed:90.22% of 92
Branches executed:100.00% of 32
Taken at least once:71.88% of 32
Calls executed:84.78% of 46
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compareInt called 7 returned 100% blocks executed 67%
        7:    8:int compareInt(int a, int b) {
        7:    9:  if (a > b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
        7:   11:  if (a < b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:    return -1;
        7:   13:  return 0;
        -:   14:}
        -:   15:
function testUpdateCoins called 1 returned 100% blocks executed 90%
        1:   16:void testUpdateCoins() {
        -:   17:	
        -:   18:	
        1:   19:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   20:           sea_hag, tribute, smithy};
        -:   21:	
        -:   22:    struct gameState* myState1;
        -:   23:	struct gameState* myState2;
        -:   24:	struct gameState* myState3;
        -:   25:	struct gameState* myState4;
        -:   26:	struct gameState* myState5;
        -:   27:	struct gameState* myState6;
        -:   28:	struct gameState* myState7;
        -:   29:	struct gameState* myState8;
        -:   30:	
        1:   31:	myState1 = newGame();
call    0 returned 100%
        1:   32:	myState2 = newGame();
call    0 returned 100%
        1:   33:	myState3 = newGame();
call    0 returned 100%
        1:   34:	myState4 = newGame();
call    0 returned 100%
        1:   35:	myState5 = newGame();
call    0 returned 100%
        1:   36:	myState6 = newGame();
call    0 returned 100%
        1:   37:	myState7 = newGame();
call    0 returned 100%
        1:   38:	myState8 = newGame();
call    0 returned 100%
        -:   39:	
        1:   40:	initializeGame(4, k, 3, myState1);
call    0 returned 100%
        1:   41:	initializeGame(4, k, 3, myState2);
call    0 returned 100%
        1:   42:	initializeGame(4, k, 3, myState3);
call    0 returned 100%
        1:   43:	initializeGame(4, k, 3, myState4);
call    0 returned 100%
        1:   44:	initializeGame(4, k, 3, myState5);
call    0 returned 100%
        1:   45:	initializeGame(4, k, 3, myState6);
call    0 returned 100%
        1:   46:	initializeGame(4, k, 3, myState7);
call    0 returned 100%
        1:   47:	initializeGame(4, k, 3, myState8);
call    0 returned 100%
        -:   48:	
        -:   49:	
        -:   50:	int i;
        -:   51:	
        -:   52:	// Test 1: Using Player 1 - 1 Copper - 1 Silver - 1 Gold
        1:   53:	int intTest1Player = 1;
        1:   54:	myState1->hand[intTest1Player][0] = copper;
        1:   55:	myState1->hand[intTest1Player][1] = silver;
        1:   56:	myState1->hand[intTest1Player][2] = gold;
      498:   57:	for (i = 3; i < 500; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   58:    {
      497:   59:		myState1->hand[intTest1Player][i] = curse;
        -:   60:	}
        1:   61:	myState1->handCount[intTest1Player] = 500;
        -:   62:	
        -:   63:	// Test 2: Using Player 1 - 1 Copper
        1:   64:	int intTest2Player = 1;
        1:   65:	myState2->hand[intTest2Player][0] = copper;
      500:   66:	for (i = 1; i < 500; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   67:    {
      499:   68:		myState2->hand[intTest2Player][i] = curse;
        -:   69:	}
        1:   70:	myState2->handCount[intTest2Player] = 500;
        -:   71:	
        -:   72:	// Test 3: Using Player 1 - 1 Silver
        1:   73:	int intTest3Player = 1;
        1:   74:	myState3->hand[intTest2Player][0] = silver;
      500:   75:	for (i = 1; i < 500; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   76:    {
      499:   77:		myState3->hand[intTest3Player][i] = curse;
        -:   78:	}
        1:   79:	myState3->handCount[intTest3Player] = 500;
        -:   80:	
        -:   81:	// Test 4: Using Player 4 - 1 Gold
        1:   82:	int intTest4Player = 4;
        1:   83:	myState4->hand[intTest4Player][0] = gold;
      500:   84:	for (i = 1; i < 500; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   85:    {
      499:   86:		myState4->hand[intTest4Player][i] = curse;
        -:   87:	}
        1:   88:	myState4->handCount[intTest4Player] = 500;
        -:   89:	
        -:   90:	// Test 5: Using Player 1 - All Coppers
        1:   91:	int intTest5Player = 1;
      501:   92:	for (i = 0; i < 500; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   93:    {
      500:   94:		myState5->hand[intTest5Player][i] = copper;
        -:   95:	}
        1:   96:	myState5->handCount[intTest5Player] = 500;
        -:   97:	
        -:   98:	// Test 6: Using Player 1 - No Coins
        1:   99:	int intTest6Player = 1;
      501:  100:	for (i = 0; i < 500; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  101:    {
      500:  102:		myState6->hand[intTest6Player][i] = curse;
        -:  103:	}
        1:  104:	myState6->handCount[intTest6Player] = 500;
        -:  105:	
        -:  106:	//**********
        -:  107:	//* Had to stop running this test because it caused a segmentation fault
        -:  108:	//* Function should make sure that player number is withing range
        -:  109:	//**********
        -:  110:	// Test 7: Using Player 100 - Out of bounds player number - 1 Copper
        -:  111:	//int intTest7Player = 100;
        -:  112:	//myState7->hand[intTest7Player][0] = copper;
        -:  113:	
        -:  114:	// Test 8: Using Player 1 - No Coins - Negative Bonus
        1:  115:	int intTest8Player = 1;
        1:  116:	int intTest8Bonus = -5;
      501:  117:	for (i = 0; i < 500; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  118:    {
      500:  119:		myState8->hand[intTest8Player][i] = curse;
        -:  120:	}
        1:  121:	myState8->handCount[intTest8Player] = 500;
        -:  122:	
        -:  123:	
        -:  124:	// Running Test 1: Using Player 1 - 1 Copper - 1 Silver - 1 Gold
        1:  125:    updateCoins(intTest1Player, myState1, 0);
call    0 returned 100%
        1:  126:	if (compareInt(myState1->coins, 6) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  127:        printf("updateCoins(): PASS with one of each coin\n");
call    0 returned 100%
        -:  128:    else
    #####:  129:        printf("updateCoins(): FAIL with one of each coin\n");
call    0 never executed
        -:  130:	
        -:  131:	
        -:  132:	// Running Test 2: Using Player 1 - 1 Copper
        1:  133:	updateCoins(intTest2Player, myState2, 0);
call    0 returned 100%
        1:  134:    if (compareInt(myState2->coins, 1) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  135:        printf("updateCoins(): PASS with single copper\n");
call    0 returned 100%
        -:  136:    else
    #####:  137:        printf("updateCoins(): FAIL with single copper\n");
call    0 never executed
        -:  138:    
        -:  139:	// Running Test 3: Using Player 1 - 1 Silver
        1:  140:	updateCoins(intTest3Player, myState3, 0);
call    0 returned 100%
        1:  141:    if (compareInt(myState3->coins, 2) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  142:        printf("updateCoins(): PASS with single silver\n");
call    0 returned 100%
        -:  143:    else
    #####:  144:        printf("updateCoins(): FAIL with single silver\n");
call    0 never executed
        -:  145:    
        -:  146:	// Running Test 4: Using Player 4 - 1 Gold
        1:  147:	updateCoins(intTest4Player, myState4, 0);
call    0 returned 100%
        1:  148:    if (compareInt(myState4->coins, 3) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  149:        printf("updateCoins(): PASS with single gold\n");
call    0 returned 100%
        -:  150:    else
    #####:  151:        printf("updateCoins(): FAIL with single gold\n");
call    0 never executed
        -:  152:	
        -:  153:	// Running Test 5: Using Player 1 - All Coppers
        1:  154:	updateCoins(intTest5Player, myState5, 0);
call    0 returned 100%
        1:  155:    if (compareInt(myState5->coins, 500) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  156:        printf("updateCoins(): PASS with single gold\n");
call    0 returned 100%
        -:  157:    else
    #####:  158:        printf("updateCoins(): FAIL with single gold\n");
call    0 never executed
        -:  159:	
        -:  160:	// Running Test 6: Using Player 1 - No Coins
        1:  161:	updateCoins(intTest6Player, myState6, 0);
call    0 returned 100%
        1:  162:    if (compareInt(myState6->coins, 0) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  163:        printf("updateCoins(): PASS with all copper\n");
call    0 returned 100%
        -:  164:    else
    #####:  165:        printf("updateCoins(): FAIL with all copper\n");
call    0 never executed
        -:  166:	
        -:  167:	// Running Test 7: Using Player 100 - Out of bounds player number - 1 Copper
        -:  168:	//updateCoins(intTest7Player, myState7, 0);
        -:  169:    //if (compare(myState7->coins, 1) == 0)
        -:  170:    //    printf("updateCoins(): PASS with out of bound player, one copper\n");
        -:  171:    //else
        -:  172:    //    printf("updateCoins(): FAIL with out of bound player, one copper\n");
        -:  173:	
        -:  174:	// Running Test 8: Using Player 1 - No Coins - Negative Bonus
        1:  175:	updateCoins(intTest8Player, myState8, intTest8Bonus);
call    0 returned 100%
        1:  176:    if (compareInt(myState8->coins, intTest8Bonus) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  177:        printf("updateCoins(): PASS with negative Bonus\n");
call    0 returned 100%
        -:  178:    else
    #####:  179:        printf("updateCoins(): FAIL with negative Bonus\n");
call    0 never executed
        1:  180:}
        -:  181:
        -:  182:
        -:  183:
function main called 1 returned 100% blocks executed 100%
        1:  184:int main(int argc, char *argv[])
        -:  185:{
        1:  186:	printf("Start Unit Test 1: updateCoins()\n");
call    0 returned 100%
        1:  187:    testUpdateCoins();
call    0 returned 100%
        1:  188:    return 0;
        -:  189:}
Start Unit Test 2: getCost()
getCost(): PASS with curse
getCost(): PASS with estate
getCost(): PASS with duchy
getCost(): PASS with province
getCost(): PASS with copper
getCost(): PASS with silver
getCost(): PASS with gold
getCost(): PASS with adventurer
getCost(): PASS with council_room
getCost(): PASS with feast
getCost(): PASS with gardens
getCost(): PASS with mine
getCost(): PASS with remodel
getCost(): PASS with smithy
getCost(): PASS with village
getCost(): PASS with baron
getCost(): PASS with great_hall
getCost(): PASS with minion
getCost(): PASS with steward
getCost(): PASS with tribute
getCost(): PASS with ambassador
getCost(): PASS with cutpurse
getCost(): PASS with embargo
getCost(): PASS with outpost
getCost(): PASS with salvager
getCost(): PASS with sea_hag
getCost(): PASS with treasure_map
getCost() : PASS with treasure_map wrong value
getCost() : PASS with noCard
File 'unittest2.c'
Lines executed:70.00% of 100
Branches executed:100.00% of 62
Taken at least once:51.61% of 62
Calls executed:75.42% of 118
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compareInt called 29 returned 100% blocks executed 83%
       29:    8:int compareInt(int a, int b) {
       29:    9:  if (a > b)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        1:   10:    return 1;
       28:   11:  if (a < b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:    return -1;
       28:   13:  return 0;
        -:   14:}
        -:   15:
        -:   16:	
        -:   17:	//*
function testGetCost called 1 returned 100% blocks executed 80%
        1:   18:void testGetCost()
        -:   19:{
        -:   20:
        -:   21:	// Test 1: Curse
        1:   22:	if (compareInt(getCost(curse), 0) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   23:        printf("getCost(): PASS with curse\n");
call    0 returned 100%
        -:   24:    else
    #####:   25:        printf("getCost(): FAIL with curse\n");
call    0 never executed
        -:   26:	
        -:   27:	// Test 2: Estate
        1:   28:    if (compareInt(getCost(estate), 2) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   29:        printf("getCost(): PASS with estate\n");
call    0 returned 100%
        -:   30:    else
    #####:   31:        printf("getCost(): FAIL with estate\n");
call    0 never executed
        -:   32:	
        -:   33:    // Test 3: Duchy
        1:   34:    if (compareInt(getCost(duchy), 5) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   35:        printf("getCost(): PASS with duchy\n");
call    0 returned 100%
        -:   36:    else
    #####:   37:        printf("getCost(): FAIL with duchy\n");
call    0 never executed
        -:   38:	
        -:   39:    // Test 4: Province
        1:   40:    if (compareInt(getCost(province), 8) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   41:        printf("getCost(): PASS with province\n");
call    0 returned 100%
        -:   42:    else
    #####:   43:        printf("getCost(): FAIL with province\n");
call    0 never executed
        -:   44:	
        -:   45:    // Test 5: Copper
        1:   46:    if (compareInt(getCost(copper), 0) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   47:        printf("getCost(): PASS with copper\n");
call    0 returned 100%
        -:   48:    else
    #####:   49:        printf("getCost(): FAIL with copper\n");
call    0 never executed
        -:   50:	
        -:   51:    // Test 6: Silver
        1:   52:    if (compareInt(getCost(silver), 3) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   53:        printf("getCost(): PASS with silver\n");
call    0 returned 100%
        -:   54:    else
    #####:   55:        printf("getCost(): FAIL with silver\n");
call    0 never executed
        -:   56:	
        -:   57:    // Test 7: Gold
        1:   58:    if (compareInt(getCost(gold), 6) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   59:        printf("getCost(): PASS with gold\n");
call    0 returned 100%
        -:   60:    else
    #####:   61:        printf("getCost(): FAIL with gold\n");
call    0 never executed
        -:   62:	
        -:   63:    // Test 8: Adventurer
        1:   64:    if (compareInt(getCost(adventurer), 6) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   65:        printf("getCost(): PASS with adventurer\n");
call    0 returned 100%
        -:   66:    else
    #####:   67:        printf("getCost(): FAIL with adventurer\n");
call    0 never executed
        -:   68:	
        -:   69:    // Test 9: Council_room
        1:   70:    if (compareInt(getCost(council_room), 5) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   71:        printf("getCost(): PASS with council_room\n");
call    0 returned 100%
        -:   72:    else
    #####:   73:        printf("getCost(): FAIL with council_room\n");
call    0 never executed
        -:   74:	
        -:   75:    // Test 10: Feast
        1:   76:    if (compareInt(getCost(feast), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   77:        printf("getCost(): PASS with feast\n");
call    0 returned 100%
        -:   78:    else
    #####:   79:        printf("getCost(): FAIL with feast\n");
call    0 never executed
        -:   80:	
        -:   81:    // Test 11: Gardens
        1:   82:    if (compareInt(getCost(gardens), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   83:        printf("getCost(): PASS with gardens\n");
call    0 returned 100%
        -:   84:    else
    #####:   85:        printf("getCost(): FAIL with gardens\n");
call    0 never executed
        -:   86:	
        -:   87:    // Test 12: Mine
        1:   88:    if (compareInt(getCost(mine), 5) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   89:        printf("getCost(): PASS with mine\n");
call    0 returned 100%
        -:   90:    else
    #####:   91:        printf("getCost(): FAIL with mine\n");
call    0 never executed
        -:   92:	
        -:   93:    // Test 13: Remodel
        1:   94:    if (compareInt(getCost(remodel), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   95:        printf("getCost(): PASS with remodel\n");
call    0 returned 100%
        -:   96:    else
    #####:   97:        printf("getCost(): FAIL with remodel\n");
call    0 never executed
        -:   98:	
        -:   99:    // Test 14: Smithy
        1:  100:    if (compareInt(getCost(smithy), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  101:        printf("getCost(): PASS with smithy\n");
call    0 returned 100%
        -:  102:    else
    #####:  103:        printf("getCost(): FAIL with smithy\n");
call    0 never executed
        -:  104:	
        -:  105:    // Test 15: Village
        1:  106:    if (compareInt(getCost(village), 3) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  107:        printf("getCost(): PASS with village\n");
call    0 returned 100%
        -:  108:    else
    #####:  109:        printf("getCost(): FAIL with village\n");
call    0 never executed
        -:  110:	
        -:  111:    // Test 16: Baron
        1:  112:    if (compareInt(getCost(baron), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  113:        printf("getCost(): PASS with baron\n");
call    0 returned 100%
        -:  114:    else
    #####:  115:        printf("getCost(): FAIL with baron\n");
call    0 never executed
        -:  116:	
        -:  117:    // Test 17: Great_hall
        1:  118:    if (compareInt(getCost(great_hall), 3) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  119:        printf("getCost(): PASS with great_hall\n");
call    0 returned 100%
        -:  120:    else
    #####:  121:        printf("getCost(): FAIL with great_hall\n");
call    0 never executed
        -:  122:	
        -:  123:    // Test 18: Minion
        1:  124:    if (compareInt(getCost(minion), 5) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  125:        printf("getCost(): PASS with minion\n");
call    0 returned 100%
        -:  126:    else
    #####:  127:        printf("getCost(): FAIL with minion\n");
call    0 never executed
        -:  128:	
        -:  129:    // Test 19: Steward
        1:  130:    if (compareInt(getCost(steward), 3) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  131:        printf("getCost(): PASS with steward\n");
call    0 returned 100%
        -:  132:    else
    #####:  133:        printf("getCost(): FAIL with steward\n");
call    0 never executed
        -:  134:	
        -:  135:    // Test 20: Tribute
        1:  136:    if (compareInt(getCost(tribute), 5) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  137:        printf("getCost(): PASS with tribute\n");
call    0 returned 100%
        -:  138:    else
    #####:  139:        printf("getCost(): FAIL with tribute\n");
call    0 never executed
        -:  140:	
        -:  141:    // Test 21: Ambassador
        1:  142:    if (compareInt(getCost(ambassador), 3) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  143:        printf("getCost(): PASS with ambassador\n");
call    0 returned 100%
        -:  144:    else
    #####:  145:        printf("getCost(): FAIL with ambassador\n");
call    0 never executed
        -:  146:	
        -:  147:    // Test 21: Cutpurse
        1:  148:    if (compareInt(getCost(cutpurse), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  149:        printf("getCost(): PASS with cutpurse\n");
call    0 returned 100%
        -:  150:    else
    #####:  151:        printf("getCost(): FAIL with cutpurse\n");
call    0 never executed
        -:  152:	
        -:  153:    // Test 22: Embargo 
        1:  154:    if (compareInt(getCost(embargo), 2) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  155:        printf("getCost(): PASS with embargo\n");
call    0 returned 100%
        -:  156:    else
    #####:  157:        printf("getCost(): FAIL with embargo\n");
call    0 never executed
        -:  158:	
        -:  159:    // Test 23: Outpost
        1:  160:    if (compareInt(getCost(outpost), 5) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  161:        printf("getCost(): PASS with outpost\n");
call    0 returned 100%
        -:  162:    else
    #####:  163:        printf("getCost(): FAIL with outpost\n");
call    0 never executed
        -:  164:	
        -:  165:    // Test 24: Salvager
        1:  166:    if (compareInt(getCost(salvager), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  167:        printf("getCost(): PASS with salvager\n");
call    0 returned 100%
        -:  168:    else
    #####:  169:        printf("getCost(): FAIL with salvager\n");
call    0 never executed
        -:  170:	
        -:  171:    // Test 25: Sea_hag
        1:  172:    if (compareInt(getCost(sea_hag), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  173:        printf("getCost(): PASS with sea_hag\n");
call    0 returned 100%
        -:  174:    else
    #####:  175:        printf("getCost(): FAIL with sea_hag\n");
call    0 never executed
        -:  176:	
        -:  177:    // Test 26: Treasure_map
        1:  178:	if (compareInt(getCost(treasure_map), 4) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  179:        printf("getCost(): PASS with treasure_map\n");
call    0 returned 100%
        -:  180:    else
    #####:  181:        printf("getCost(): FAIL with treasure_map\n");
call    0 never executed
        -:  182:	
        -:  183:	// Test 27: Treasure_map Wrong
        1:  184:	if (compareInt(getCost(treasure_map), 0) != 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  185:		printf("getCost() : PASS with treasure_map wrong value\n");
call    0 returned 100%
        -:  186:	else
    #####:  187:		printf("getCost() : FAIL with treasure_map wrong value\n");
call    0 never executed
        -:  188:	
        -:  189:	// Test 28: noCard
        1:  190:	int noCard = 100;
        -:  191:	
        1:  192:	if (compareInt(getCost(noCard), -1) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  193:		printf("getCost() : PASS with noCard\n");
call    0 returned 100%
        -:  194:	else
    #####:  195:		printf("getCost() : FAIL with noCard\n");
call    0 never executed
        1:  196:}	
        -:  197:
        -:  198:
function main called 1 returned 100% blocks executed 100%
        1:  199:int main(int argc, char *argv[])
        -:  200:{
        1:  201:	printf("Start Unit Test 2: getCost()\n");
call    0 returned 100%
        1:  202:    testGetCost();
call    0 returned 100%
        1:  203:    return 0;
        -:  204:}
Start Unit Test 3: whoseTurn()
whoseTurn(): PASS with Player 1
whoseTurn(): FAIL with Player 100
whoseTurn(): FAIL with Player -100
File 'unittest3.c'
Lines executed:88.89% of 27
Branches executed:100.00% of 10
Taken at least once:70.00% of 10
Calls executed:82.35% of 17
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compareInt called 3 returned 100% blocks executed 100%
        3:    8:int compareInt(int a, int b) {
        3:    9:  if (a > b)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   10:    return 1;
        2:   11:  if (a < b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   12:    return -1;
        1:   13:  return 0;
        -:   14:}
        -:   15:	
        -:   16:	//*
function testWhoseTurn called 1 returned 100% blocks executed 84%
        1:   17:void testWhoseTurn()
        -:   18:{	
        -:   19:
        -:   20:	struct gameState* myState1;
        -:   21:	struct gameState* myState2;
        -:   22:	struct gameState* myState3;
        -:   23:	
        -:   24:	
        1:   25:	myState1 = newGame();
call    0 returned 100%
        1:   26:	myState2 = newGame();
call    0 returned 100%
        1:   27:	myState3 = newGame();
call    0 returned 100%
        -:   28:	
        1:   29:	myState1->whoseTurn = 1;
        -:   30:	
        1:   31:	myState2->whoseTurn = 100;
        -:   32:	
        1:   33:	myState3->whoseTurn = -100;
        -:   34:	
        -:   35:
        -:   36:	// Test 1: Player 1
        1:   37:	if (compareInt(whoseTurn(myState1), 1) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   38:        printf("whoseTurn(): PASS with Player 1\n");
call    0 returned 100%
        -:   39:    else
    #####:   40:        printf("whoseTurn(): FAIL with Player 1\n");
call    0 never executed
        -:   41:	
        -:   42:	// Test 2: Player 100 - Should come back invalid (-1)
        1:   43:    if (compareInt(whoseTurn(myState2), -1) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   44:        printf("whoseTurn(): PASS with Player 100\n");
call    0 never executed
        -:   45:    else
        1:   46:        printf("whoseTurn(): FAIL with Player 100\n");
call    0 returned 100%
        -:   47:	
        -:   48:    // Test 3: Player -100 - Should come back invalid (-1)
        1:   49:    if (compareInt(whoseTurn(myState3), -1) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   50:        printf("whoseTurn(): PASS with Player -100\n");
call    0 never executed
        -:   51:    else
        1:   52:        printf("whoseTurn(): FAIL with Player -100\n");
call    0 returned 100%
        -:   53:	
        -:   54:    
        -:   55:	
        1:   56:}
        -:   57:
function main called 1 returned 100% blocks executed 100%
        1:   58:int main(int argc, char *argv[])
        -:   59:{
        1:   60:	printf("Start Unit Test 3: whoseTurn()\n");
call    0 returned 100%
        1:   61:    testWhoseTurn();
call    0 returned 100%
        1:   62:    return 0;
        -:   63:}
Start Unit Test 4: numHandCards()
numHandCount(): PASS with 4 cards
numHandCount(): PASS with 0 cards
numHandCount(): FAIL with 501 cards
File 'unittest4.c'
Lines executed:86.49% of 37
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:85.00% of 20
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compareInt called 3 returned 100% blocks executed 67%
        3:   10:int compareInt(int a, int b) {
        3:   11:  if (a > b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:    return 1;
        3:   13:  if (a < b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   14:    return -1;
        3:   15:  return 0;
        -:   16:}
        -:   17:	
        -:   18:	//*
function testNumHandCards called 1 returned 100% blocks executed 86%
        1:   19:void testNumHandCards()
        -:   20:{	
        -:   21:
        1:   22:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   23:           sea_hag, tribute, smithy};
        -:   24:	
        -:   25:	struct gameState* myState1;
        -:   26:	struct gameState* myState2;
        -:   27:	struct gameState* myState3;
        -:   28:	
        -:   29:	
        1:   30:	myState1 = newGame();
call    0 returned 100%
        1:   31:	myState2 = newGame();
call    0 returned 100%
        1:   32:	myState3 = newGame();
call    0 returned 100%
        -:   33:	
        -:   34:	
        1:   35:	initializeGame(4, k, 3, myState1);
call    0 returned 100%
        1:   36:	initializeGame(4, k, 3, myState2);
call    0 returned 100%
        1:   37:	initializeGame(4, k, 3, myState3);
call    0 returned 100%
        -:   38:	
        -:   39:	
        -:   40:
        -:   41:	// Test 1: Player 1 - 4 Cards in Hand
        1:   42:	int intTest1Player = 1;
        1:   43:	myState1->whoseTurn = 1;
        1:   44:	myState1->handCount[intTest1Player] = 4;
        -:   45:	
        -:   46:	// Test 2: Player 2 - Zero Cards in Hand
        1:   47:	int intTest2Player = 2;
        1:   48:	myState2->whoseTurn = 2;
        1:   49:	myState2->handCount[intTest2Player] = 0;
        -:   50:	
        -:   51:	// Test 3: Player 3 - 501 Cards in Hand
        1:   52:	int intTest3Player = 3;
        1:   53:	myState3->whoseTurn = 3;
        1:   54:	myState3->handCount[intTest3Player] = 501;
        -:   55:	
        -:   56:	
        -:   57:	// Running Test 1
        1:   58:	if (compareInt(numHandCards(myState1), myState1->handCount[intTest1Player]) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   59:        printf("numHandCount(): PASS with 4 cards\n");
call    0 returned 100%
        -:   60:    else
    #####:   61:        printf("numHandCount(): FAIL with 4 cards\n");
call    0 never executed
        -:   62:	
        -:   63:	// Running Test 2: 
        1:   64:	if (compareInt(numHandCards(myState2), myState2->handCount[intTest2Player]) == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   65:        printf("numHandCount(): PASS with 0 cards\n");
call    0 returned 100%
        -:   66:    else
    #####:   67:        printf("numHandCount(): FAIL with 0 cards\n");
call    0 never executed
        -:   68:	
        -:   69:	// Running Test 3: Shou;d be -1 because out of range
        1:   70:	if (compareInt(numHandCards(myState3), myState3->handCount[intTest3Player]) != 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   71:        printf("numHandCount(): PASS with 501 cards\n");
call    0 never executed
        -:   72:    else
        1:   73:        printf("numHandCount(): FAIL with 501 cards\n");
call    0 returned 100%
        -:   74:	
        -:   75:	
        -:   76:	
        -:   77:    
        -:   78:	
        1:   79:}
        -:   80:
function main called 1 returned 100% blocks executed 100%
        1:   81:int main(int argc, char *argv[])
        -:   82:{
        1:   83:	printf("Start Unit Test 4: numHandCards()\n");
call    0 returned 100%
        1:   84:    testNumHandCards();
call    0 returned 100%
        1:   85:    return 0;
        -:   86:}
Start Card Test 1: Adventurer
Adventurer card: FAIL with discard
Adventurer card: FAIL with adding 2 coins
Adventurer card w/ Shuffle: FAIL with discard
Adventurer card w/ Shuffle: FAIL with adding 2 coins
File 'cardtest1.c'
Lines executed:93.98% of 83
Branches executed:100.00% of 60
Taken at least once:81.67% of 60
Calls executed:80.00% of 20
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
        -:   10:
function compareInt called 4 returned 100% blocks executed 83%
        4:   11:int compareInt(int a, int b) {
        4:   12:  if (a > b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   13:    return 1;
        2:   14:  if (a < b)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   15:    return -1;
    #####:   16:  return 0;
        -:   17:}
        -:   18:
        -:   19:
        -:   20:
function testAdventurer called 1 returned 100% blocks executed 94%
        1:   21:void testAdventurer() {
        -:   22:	
        -:   23:	// Testing should make sure that two coin cards are added to the hand
        -:   24:	
        1:   25:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   26:           sea_hag, tribute, smithy};
        -:   27:		   
        -:   28:    struct gameState* myState1;
        -:   29:	struct gameState* myState2;
        -:   30:	
        -:   31:	
        1:   32:	myState1 = newGame();
call    0 returned 100%
        1:   33:	myState2 = newGame();
call    0 returned 100%
        -:   34:	
        -:   35:	
        1:   36:	initializeGame(4, k, 3, myState1);
call    0 returned 100%
        1:   37:	initializeGame(4, k, 3, myState2);
call    0 returned 100%
        -:   38:	
        -:   39:	
        -:   40:	int intTempHand[500];
        -:   41:	int i;
        -:   42:	
        -:   43:	// Test 1: Player 1 - 
        1:   44:	int intTest1Player = 1;
        1:   45:	int intInitialAdventurerCount = 0;
        1:   46:	int intInitialCoinCount = 0;
        -:   47:	
        1:   48:	myState1->hand[intTest1Player][0] = adventurer;
        1:   49:	myState1->hand[intTest1Player][1] = copper;
        1:   50:	myState1->hand[intTest1Player][2] = copper;
        1:   51:	myState1->hand[intTest1Player][3] = copper;
        -:   52:	
        1:   53:	myState1->deck[intTest1Player][0] = copper;
        1:   54:	myState1->deck[intTest1Player][1] = smithy;
        1:   55:	myState1->deck[intTest1Player][2] = copper;
        -:   56:	
        1:   57:	myState1->handCount[intTest1Player] = 500;
        1:   58:	myState1->deckCount[intTest1Player] = 3;
        -:   59:	
        -:   60:	
      501:   61:	for (i=0; i < myState1->handCount[intTest1Player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   62:	{
      500:   63:		if (myState1->hand[intTest1Player][i] == adventurer)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   64:		{
        1:   65:			intInitialAdventurerCount++;
        -:   66:		}
        -:   67:	}
        -:   68:	
        -:   69:	
      501:   70:	for (i=0; i < myState1->handCount[intTest1Player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   71:	{
      500:   72:		if (myState1->hand[intTest1Player][i] == copper || myState1->hand[intTest1Player][i] == silver || myState1->hand[intTest1Player][i] == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   73:		{
        3:   74:			intInitialCoinCount++;
        -:   75:		}
        -:   76:	}
        -:   77:	
        -:   78:	
        -:   79:	// Run Test 1
        1:   80:	int intAdventurerCount = 0;
        1:   81:	int intCoinCount = 0;
        -:   82:	
        -:   83:	int* intBonus;
        -:   84:	
        1:   85:	cardEffect(adventurer, 0, 0, 0, myState1, 0, intBonus);
call    0 returned 100%
        -:   86:	//callAdventurer(myState1, intTest1Player, &intTempHand);
        -:   87:	
      501:   88:	for (i=0; i < myState1->handCount[intTest1Player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   89:	{
      500:   90:		if (myState1->hand[intTest1Player][i] == adventurer)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   91:		{
        1:   92:			intAdventurerCount++;
        -:   93:		}
        -:   94:	}
        -:   95:	
        -:   96:	
        -:   97:	
      501:   98:	for (i=0; i < myState1->handCount[intTest1Player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   99:	{
      500:  100:		if (myState1->hand[intTest1Player][i] == copper || myState1->hand[intTest1Player][i] == silver || myState1->hand[intTest1Player][i] == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  101:		{
        3:  102:			intCoinCount++;
        -:  103:		}
        -:  104:	}
        -:  105:	
        -:  106:	
        1:  107:	if (compareInt(intInitialAdventurerCount - 1, intAdventurerCount) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  108:        printf("Adventurer card: PASS with discard\n");
call    0 never executed
        -:  109:    else
        1:  110:        printf("Adventurer card: FAIL with discard\n");
call    0 returned 100%
        -:  111:	
        1:  112:	if (compareInt(intInitialCoinCount + 2, intCoinCount) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  113:        printf("Adventurer card: PASS with adding 2 coins\n");
call    0 never executed
        -:  114:    else
        1:  115:        printf("Adventurer card: FAIL with adding 2 coins\n");
call    0 returned 100%
        -:  116:	
        -:  117:	
        -:  118:	
        -:  119:	// Test 2: Player 1 - 
        1:  120:	int intTest2Player = 1;
        1:  121:	intInitialAdventurerCount = 0;
        1:  122:	intInitialCoinCount = 0;
        -:  123:	
        1:  124:	myState2->hand[intTest2Player][0] = gold;
        1:  125:	myState2->hand[intTest2Player][1] = adventurer;
        1:  126:	myState2->hand[intTest2Player][2] = copper;
        1:  127:	myState2->hand[intTest2Player][3] = copper;
        -:  128:	
        1:  129:	myState2->deck[intTest2Player][0] = copper;
        1:  130:	myState2->deck[intTest2Player][1] = smithy;
        1:  131:	myState2->deck[intTest2Player][2] = curse;
        -:  132:	
        1:  133:	myState2->handCount[intTest2Player] = 4;
        1:  134:	myState2->deckCount[intTest2Player] = 3;
        -:  135:	
        5:  136:	for (i=0; i < myState2->handCount[intTest2Player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  137:	{
        4:  138:		if (myState2->hand[intTest2Player][i] == adventurer)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  139:		{
        1:  140:			intInitialAdventurerCount++;
        -:  141:		}
        -:  142:	}
        -:  143:	
        5:  144:	for (i=0; i < myState2->handCount[intTest2Player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  145:	{
        4:  146:		if (myState2->hand[intTest2Player][i] == copper || myState2->hand[intTest2Player][i] == silver || myState2->hand[intTest2Player][i] == gold)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        -:  147:		{
        3:  148:			intInitialCoinCount++;
        -:  149:		}
        -:  150:	}
        -:  151:	
        -:  152:	// Run Test 2
        1:  153:	intAdventurerCount = 0;
        1:  154:	intCoinCount = 0;
        -:  155:	
        1:  156:	cardEffect(adventurer, 0, 0, 0, myState2, 1, intBonus);
call    0 returned 100%
        -:  157:	//callAdventurer(myState2, intTest2Player, intTempHand);
        -:  158:	
        5:  159:	for (i=0; i < myState2->handCount[intTest2Player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  160:	{
        4:  161:		if (myState2->hand[intTest2Player][i] == adventurer)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  162:		{
        1:  163:			intAdventurerCount++;
        -:  164:		}
        -:  165:	}
        -:  166:	
        5:  167:	for (i=0; i < myState2->handCount[intTest2Player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  168:	{
        4:  169:		if (myState2->hand[intTest2Player][i] == copper || myState2->hand[intTest2Player][i] == silver || myState2->hand[intTest2Player][i] == gold)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        -:  170:		{
        3:  171:			intCoinCount++;
        -:  172:		}
        -:  173:	}
        -:  174:	
        -:  175:	
        -:  176:	
        1:  177:	if (compareInt(intInitialAdventurerCount - 1, intAdventurerCount) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  178:        printf("Adventurer card w/ Shuffle: PASS with discard\n");
call    0 never executed
        -:  179:    else
        1:  180:        printf("Adventurer card w/ Shuffle: FAIL with discard\n");
call    0 returned 100%
        -:  181:	
        1:  182:	if (compareInt(intInitialCoinCount + 2, intCoinCount) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  183:        printf("Adventurer card w/ Shuffle: PASS with adding 2 coins\n");
call    0 never executed
        -:  184:    else
        1:  185:        printf("Adventurer card w/ Shuffle: FAIL with adding 2 coins\n");
call    0 returned 100%
        -:  186:	
        -:  187:	
        1:  188:}
        -:  189:
        -:  190:
        -:  191:
function main called 1 returned 100% blocks executed 100%
        1:  192:int main(int argc, char *argv[])
        -:  193:{
        1:  194:	printf("Start Card Test 1: Adventurer\n");
call    0 returned 100%
        1:  195:    testAdventurer();
call    0 returned 100%
        1:  196:    return 0;
        -:  197:}
Start Card Test 2: Smithy
Smithy card: PASS with Player 1
Smithy card: FAIL with Player 2
File 'cardtest2.c'
Lines executed:85.96% of 57
Branches executed:78.57% of 28
Taken at least once:60.71% of 28
Calls executed:81.25% of 16
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compareInt called 3 returned 100% blocks executed 83%
        3:   10:int compareInt(int a, int b) {
        3:   11:  if (a > b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:    return 1;
        3:   13:  if (a < b)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   14:    return -1;
        2:   15:  return 0;
        -:   16:}
        -:   17:	
        -:   18:	//*
function testSmithy called 1 returned 100% blocks executed 73%
        1:   19:void testSmithy()
        -:   20:{
        -:   21:	
        -:   22:	// Testing should make sure that three cards are drawn, and that the card is discarded
        -:   23:	
        1:   24:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   25:           sea_hag, tribute, smithy};
        -:   26:	
        -:   27:	struct gameState* myState1;
        -:   28:	struct gameState* myState2;
        -:   29:	
        -:   30:	
        -:   31:	
        1:   32:	myState1 = newGame();
call    0 returned 100%
        1:   33:	myState2 = newGame();
call    0 returned 100%
        -:   34:	
        -:   35:	
        1:   36:	initializeGame(4, k, 3, myState1);
call    0 returned 100%
        1:   37:	initializeGame(4, k, 3, myState2);
call    0 returned 100%
        -:   38:	
        -:   39:	
        -:   40:	int i;
        -:   41:	
        1:   42:	int intSmithyCount1 = 0;
        1:   43:	int intSmithyCount2 = 0;
        -:   44:	
        -:   45:	// Test 1: Player 1 - 
        1:   46:	int intTest1Player = 1;
        -:   47:	
        1:   48:	myState1->hand[intTest1Player][0] = smithy;
        1:   49:	myState1->hand[intTest1Player][1] = copper;
        1:   50:	myState1->hand[intTest1Player][2] = copper;
        1:   51:	myState1->hand[intTest1Player][3] = copper;
        -:   52:	
        1:   53:	myState1->handCount[intTest1Player] = 4;
        -:   54:	
      501:   55:	for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   56:	{
      500:   57:		if (myState1->hand[intTest1Player][i] == smithy)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   58:		{
        1:   59:			intSmithyCount1++;
        -:   60:		}
        -:   61:	}
        -:   62:	
        -:   63:	int *intTempHand;
        -:   64:	
        -:   65:	int intInitialHandCount;
        -:   66:	
        -:   67:	int* intBonus;
        -:   68:	
        1:   69:	intInitialHandCount = myState1->handCount[intTest1Player];
        -:   70:	
        -:   71:	// Run Test
        -:   72:	
        1:   73:	cardEffect(smithy, 0, 0, 0, myState1, 0, intBonus);
call    0 returned 100%
        -:   74:	//callSmithy(myState1, intTest1Player, intTempHand, 0);
        -:   75:	
        -:   76:	// Hand count should be 2 more than before - draw three discard one
        1:   77:	if (compareInt(myState1->handCount[intTest1Player], intInitialHandCount + 2) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   78:	{
      501:   79:		for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   80:		{
      500:   81:			if (myState1->hand[intTest1Player][i] == smithy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   82:			{
    #####:   83:				intSmithyCount2++;
        -:   84:			}
        -:   85:		}
        1:   86:		if (compareInt(intSmithyCount1 - 1, intSmithyCount2) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   87:		{
        1:   88:			printf("Smithy card: PASS with Player 1\n");
call    0 returned 100%
        -:   89:		}
        -:   90:	}
        -:   91:    else
    #####:   92:        printf("Smithy card: FAIL with Player 1\n");
call    0 never executed
        -:   93:	
        -:   94:
        -:   95:
        -:   96:	
        -:   97:	
        -:   98:
        1:   99:	intSmithyCount1 = 0;
        1:  100:	intSmithyCount2 = 0;
        -:  101:	
        -:  102:	// Test 2: Player 2 - Smithy in last position
        1:  103:	int intTest2Player = 2;
        -:  104:	
        1:  105:	myState2->hand[intTest2Player][0] = copper;
        1:  106:	myState2->hand[intTest2Player][1] = copper;
        1:  107:	myState2->hand[intTest2Player][2] = copper;
        1:  108:	myState2->hand[intTest2Player][3] = smithy;
        -:  109:	
        1:  110:	myState2->handCount[intTest2Player] = 4;
        -:  111:	
      501:  112:	for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  113:	{
      500:  114:		if (myState2->hand[intTest2Player][i] == smithy)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  115:		{
        1:  116:			intSmithyCount1++;
        -:  117:		}
        -:  118:	}
        -:  119:	
        -:  120:
        -:  121:	
        1:  122:	intInitialHandCount = myState2->handCount[intTest2Player];
        -:  123:	
        -:  124:	// Run Test
        -:  125:	
        1:  126:	cardEffect(smithy, 0, 0, 0, myState2, 3, intBonus);
call    0 returned 100%
        -:  127:	//callSmithy(myState2, intTest2Player, intTempHand, 3);
        -:  128:	
        -:  129:	// Hand count should be 2 more than before - draw three discard one
        1:  130:	if (compareInt(myState2->handCount[intTest2Player], intInitialHandCount + 2) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  131:	{
    #####:  132:		for (i=0 ; i < 500 ; i++)
branch  0 never executed
branch  1 never executed
        -:  133:		{
    #####:  134:			if (myState2->hand[intTest2Player][i] == smithy)
branch  0 never executed
branch  1 never executed
        -:  135:			{
    #####:  136:				intSmithyCount2++;
        -:  137:			}
        -:  138:		}
    #####:  139:		if (compareInt(intSmithyCount1 - 1, intSmithyCount2) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:		{
    #####:  141:			printf("Smithy card: PASS with Player 2\n");
call    0 never executed
        -:  142:		}
        -:  143:	}
        -:  144:    else
        1:  145:        printf("Smithy card: FAIL with Player 2\n");
call    0 returned 100%
        -:  146:	
        -:  147:
        -:  148:
        -:  149:	
        1:  150:}
        -:  151:
        -:  152:
function main called 1 returned 100% blocks executed 100%
        1:  153:int main(int argc, char *argv[])
        -:  154:{
        1:  155:	printf("Start Card Test 2: Smithy\n");
call    0 returned 100%
        1:  156:    testSmithy();
call    0 returned 100%
        1:  157:    return 0;
        -:  158:}
Start Card Test 3: Great_Hall
Great_Hall card: FAIL with Player 1 Discard Card
Great_Hall card: FAIL with Player 2 Discard Card
File 'cardtest3.c'
Lines executed:86.15% of 65
Branches executed:87.50% of 32
Taken at least once:71.88% of 32
Calls executed:66.67% of 24
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compareInt called 4 returned 100% blocks executed 83%
        4:    9:int compareInt(int a, int b) {
        4:   10:  if (a > b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
        4:   12:  if (a < b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   13:    return -1;
        2:   14:  return 0;
        -:   15:}
        -:   16:	
        -:   17:	//*
function testGreatHall called 1 returned 100% blocks executed 77%
        1:   18:void testGreatHall()
        -:   19:{	
        -:   20:
        -:   21:	// Testing should make sure that a card is drawn, that the number of actions increases by one, and that the card is discarded
        -:   22:	
        1:   23:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   24:           sea_hag, tribute, smithy};
        -:   25:		   
        -:   26:	struct gameState* myState1;
        -:   27:	struct gameState* myState2;
        -:   28:	struct gameState* myState3;
        -:   29:	
        -:   30:	
        1:   31:	myState1 = newGame();
call    0 returned 100%
        1:   32:	myState2 = newGame();
call    0 returned 100%
        1:   33:	myState3 = newGame();
call    0 returned 100%
        -:   34:	
        1:   35:	initializeGame(4, k, 3, myState1);
call    0 returned 100%
        1:   36:	initializeGame(4, k, 3, myState2);
call    0 returned 100%
        1:   37:	initializeGame(4, k, 3, myState3);
call    0 returned 100%
        -:   38:	
        -:   39:	
        -:   40:	int i;
        -:   41:	
        1:   42:	int intGreatHallCount1 = 0;
        1:   43:	int intGreatHallCount2 = 0;
        -:   44:	
        -:   45:	// Test 1: Player 1 - 
        1:   46:	int intTest1Player = 1;
        -:   47:	
        1:   48:	myState1->hand[intTest1Player][0] = great_hall;
        1:   49:	myState1->hand[intTest1Player][1] = copper;
        1:   50:	myState1->hand[intTest1Player][2] = copper;
        1:   51:	myState1->hand[intTest1Player][3] = copper;
        -:   52:	
        1:   53:	myState1->handCount[intTest1Player] = 4;
        -:   54:	
      501:   55:	for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   56:	{
      500:   57:		if (myState1->hand[intTest1Player][i] == great_hall)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   58:		{
        1:   59:			intGreatHallCount1++;
        -:   60:		}
        -:   61:	}
        -:   62:	
        -:   63:	int *intTempHand;
        -:   64:	
        -:   65:	int* intBonus;
        -:   66:	
        -:   67:	int intInitialHandCount;
        -:   68:	
        -:   69:	int intInitialActionCount;
        -:   70:	
        1:   71:	intInitialHandCount = myState1->handCount[intTest1Player];
        -:   72:	
        1:   73:	intInitialActionCount = myState1->numActions;
        -:   74:	
        -:   75:	// Run Test
        1:   76:	cardEffect(great_hall, 0, 0, 0, myState1, 0, intBonus);
call    0 returned 100%
        -:   77:	//callGreatHall(myState1, intTest1Player, intTempHand, 0);
        -:   78:	
        -:   79:	// Hand count should be equal to before - draw one discard one
        1:   80:	if (compareInt(myState1->handCount[intTest1Player], intInitialHandCount) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   81:	{
      501:   82:		for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   83:		{
      500:   84:			if (myState1->hand[intTest1Player][i] == great_hall)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   85:			{
        1:   86:				intGreatHallCount2++;
        -:   87:			}
        -:   88:		}
        1:   89:		if (compareInt(intGreatHallCount1 - 1, intGreatHallCount2) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   90:		{
    #####:   91:			if (compareInt(intInitialActionCount, myState1->numActions) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:			{
    #####:   93:				printf("Great_Hall card: PASS with Player 1\n");
call    0 never executed
        -:   94:			}
        -:   95:			else
    #####:   96:				printf("Great_Hall card: FAIL with Player 1 Action Count\n");
call    0 never executed
        -:   97:		}
        -:   98:		else
        1:   99:			printf("Great_Hall card: FAIL with Player 1 Discard Card\n");
call    0 returned 100%
        -:  100:	}
        -:  101:    else
    #####:  102:        printf("Great_Hall card: FAIL with Player 1\n");
call    0 never executed
        -:  103:    
        -:  104:	
        -:  105:	// Test 2: Player 2 - Card in last position
        1:  106:	int intTest2Player = 2;
        -:  107:	
        1:  108:	myState2->hand[intTest2Player][0] = copper;
        1:  109:	myState2->hand[intTest2Player][1] = copper;
        1:  110:	myState2->hand[intTest2Player][2] = copper;
        1:  111:	myState2->hand[intTest2Player][3] = great_hall;
        -:  112:	
        1:  113:	myState2->handCount[intTest2Player] = 4;
        -:  114:	
      501:  115:	for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  116:	{
      500:  117:		if (myState2->hand[intTest2Player][i] == great_hall)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  118:		{
        1:  119:			intGreatHallCount1++;
        -:  120:		}
        -:  121:	}
        -:  122:	
        -:  123:	
        1:  124:	intInitialHandCount = myState2->handCount[intTest2Player];
        -:  125:	
        1:  126:	intInitialActionCount = myState2->numActions;
        -:  127:	
        -:  128:	// Run Test
        1:  129:	cardEffect(great_hall, 0, 0, 0, myState2, 3, intBonus);
call    0 returned 100%
        -:  130:	//callGreatHall(myState2, intTest2Player, intTempHand, 3);
        -:  131:	
        -:  132:	// Hand count should be equal to before - draw one discard one
        1:  133:	if (compareInt(myState2->handCount[intTest2Player], intInitialHandCount) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  134:	{
      501:  135:		for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  136:		{
      500:  137:			if (myState2->hand[intTest2Player][i] == great_hall)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  138:			{
        1:  139:				intGreatHallCount2++;
        -:  140:			}
        -:  141:		}
        1:  142:		if (compareInt(intGreatHallCount1 - 1, intGreatHallCount2) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  143:		{
    #####:  144:			if (compareInt(intInitialActionCount, myState2->numActions) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  145:			{
    #####:  146:				printf("Great_Hall card: PASS with Player 2\n");
call    0 never executed
        -:  147:			}
        -:  148:			else
    #####:  149:				printf("Great_Hall card: FAIL with Player 2 Action Count\n");
call    0 never executed
        -:  150:		}
        -:  151:		else
        1:  152:			printf("Great_Hall card: FAIL with Player 2 Discard Card\n");
call    0 returned 100%
        -:  153:		
        -:  154:	}
        -:  155:    else
    #####:  156:        printf("Great_Hall card: FAIL with Player 2\n");
call    0 never executed
        -:  157:	
        1:  158:}
        -:  159:
function main called 1 returned 100% blocks executed 100%
        1:  160:int main(int argc, char *argv[])
        -:  161:{
        1:  162:	printf("Start Card Test 3: Great_Hall\n");
call    0 returned 100%
        1:  163:    testGreatHall();
call    0 returned 100%
        1:  164:    return 0;
        -:  165:}
Start Card Test 4: Village
Village card: FAIL with Player 1 Discard Card
Village card: FAIL with Player 1 Action Count
File 'cardtest4.c'
Lines executed:89.47% of 38
Branches executed:100.00% of 18
Taken at least once:77.78% of 18
Calls executed:75.00% of 12
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
        -:   10:
function compareInt called 3 returned 100% blocks executed 83%
        3:   11:int compareInt(int a, int b) {
        3:   12:  if (a > b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   13:    return 1;
        3:   14:  if (a < b)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   15:    return -1;
        1:   16:  return 0;
        -:   17:}
        -:   18:	
        -:   19:	//*
function testVillage called 1 returned 100% blocks executed 88%
        1:   20:void testVillage()
        -:   21:{	
        -:   22:
        -:   23:	// Testing should be to make sure that a card has been drawn, that the number of actions increases by two, and that the card is discarded
        -:   24:	
        -:   25:	struct gameState* myState1;
        -:   26:	
        -:   27:	
        1:   28:	myState1 = newGame();
call    0 returned 100%
        -:   29:	
        -:   30:	
        -:   31:	int i;
        -:   32:	
        1:   33:	int intVillageCount1 = 0;
        1:   34:	int intVillageCount2 = 0;
        -:   35:	
        -:   36:	// Test 1: Player 1 - 
        1:   37:	int intTest1Player = 1;
        -:   38:	
        1:   39:	myState1->hand[intTest1Player][0] = village;
        1:   40:	myState1->hand[intTest1Player][1] = copper;
        1:   41:	myState1->hand[intTest1Player][2] = copper;
        1:   42:	myState1->hand[intTest1Player][3] = copper;
        -:   43:	
        1:   44:	myState1->handCount[intTest1Player] = 4;
        -:   45:
      501:   46:	for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   47:	{
      500:   48:		if (myState1->hand[intTest1Player][i] == village)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   49:		{
        1:   50:			intVillageCount1++;
        -:   51:		}
        -:   52:	}
        -:   53:	
        -:   54:	int *intTempHand;
        -:   55:	
        -:   56:	int* intBonus;
        -:   57:	
        -:   58:	int intInitialHandCount;
        -:   59:	
        -:   60:	int intInitialActionCount;
        -:   61:	
        1:   62:	intInitialHandCount = myState1->handCount[intTest1Player];
        -:   63:	
        1:   64:	intInitialActionCount = myState1->numActions;
        -:   65:	
        -:   66:	// Run Test
        1:   67:	cardEffect(village, 0, 0, 0, myState1, 0, intBonus);
call    0 returned 100%
        -:   68:	//callVillage(myState1, intTest1Player, intTempHand, 0);
        -:   69:	
        -:   70:	// Hand count should be equal to before - draw one discard one
        1:   71:	if (compareInt(myState1->handCount[intTest1Player], intInitialHandCount) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   72:	{
      501:   73:		for (i=0 ; i < 500 ; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   74:		{
      500:   75:			if (myState1->hand[intTest1Player][i] == village)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   76:			{
        1:   77:				intVillageCount2++;
        -:   78:			}
        -:   79:		}
        1:   80:		if (compareInt(intVillageCount1 - 1, intVillageCount2) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   81:		{
    #####:   82:			printf("Village card: PASS with Player 1 Discard Card\n");	
call    0 never executed
        -:   83:		}
        -:   84:		else
        1:   85:			printf("Village card: FAIL with Player 1 Discard Card\n");
call    0 returned 100%
        -:   86:		
        1:   87:		if (compareInt(intInitialActionCount, myState1->numActions + 2) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   88:			{
    #####:   89:				printf("Village card: PASS with Player 1\n");
call    0 never executed
        -:   90:			}
        -:   91:			else
        1:   92:				printf("Village card: FAIL with Player 1 Action Count\n");
call    0 returned 100%
        -:   93:	}
        -:   94:    else
    #####:   95:        printf("Village card: FAIL with Player 1\n");
call    0 never executed
        -:   96:	
        -:   97:	
        -:   98:	
        -:   99:    
        -:  100:	
        1:  101:}
        -:  102:
function main called 1 returned 100% blocks executed 100%
        1:  103:int main(int argc, char *argv[])
        -:  104:{
        1:  105:	printf("Start Card Test 4: Village\n");
call    0 returned 100%
        1:  106:    testVillage();
call    0 returned 100%
        1:  107:    return 0;
        -:  108:}
